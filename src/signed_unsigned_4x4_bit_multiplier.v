/* Generated by Yosys 0.39+124 (git sha1 d73f71e81, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

module full_adder(a, b, c, sum_out, carry_out);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  input a;
  wire a;
  input b;
  wire b;
  input c;
  wire c;
  output carry_out;
  wire carry_out;
  output sum_out;
  wire sum_out;
  assign _0_ = a ^ b;
  assign _1_ = _0_ ^ c;
  assign _2_ = a & b;
  assign _3_ = a & c;
  assign _4_ = _2_ | _3_;
  assign _5_ = b & c;
  assign _6_ = _4_ | _5_;
  assign sum_out = _1_;
  assign carry_out = _6_;
endmodule

module signed_unsigned_4x4_bit_multiplier(multiplicand, multiplier, signed_mode, product);
  wire [7:0] _0_;
  input [3:0] multiplicand;
  wire [3:0] multiplicand;
  input [3:0] multiplier;
  wire [3:0] multiplier;
  wire [7:0] \multiply:1 ;
  output [7:0] product;
  wire [7:0] product;
  input signed_mode;
  wire signed_mode;
  signed_unsigned_nxn_bit_multiplier_4 multiply (
    .multiplicand(multiplicand),
    .multiplier(multiplier),
    .product(_0_),
    .signed_mode(signed_mode)
  );
  assign \multiply:1  = _0_;
  assign product = \multiply:1 ;
endmodule

module signed_unsigned_nxn_bit_multiplier_4(multiplicand, multiplier, signed_mode, product);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire [19:0] invert;
  input [3:0] multiplicand;
  wire [3:0] multiplicand;
  input [3:0] multiplier;
  wire [3:0] multiplier;
  wire \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit:26 ;
  wire \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit:27 ;
  wire \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit:47 ;
  wire \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit:48 ;
  wire \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit:68 ;
  wire \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit:69 ;
  wire \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit:90 ;
  wire \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit:91 ;
  wire \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit:115 ;
  wire \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit:116 ;
  wire \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit:136 ;
  wire \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit:137 ;
  wire \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit:157 ;
  wire \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit:158 ;
  wire \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit:179 ;
  wire \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit:180 ;
  wire \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit:204 ;
  wire \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit:205 ;
  wire \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit:225 ;
  wire \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit:226 ;
  wire \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit:246 ;
  wire \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit:247 ;
  wire \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit:268 ;
  wire \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit:269 ;
  wire \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit:295 ;
  wire \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit:296 ;
  wire \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit:317 ;
  wire \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit:318 ;
  wire \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit:339 ;
  wire \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit:340 ;
  wire \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit:360 ;
  wire \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit:361 ;
  wire [19:0] part_prod_carry;
  wire [24:0] part_prod_sum;
  output [7:0] product;
  wire [7:0] product;
  wire [19:0] product_bit;
  wire [4:0] ripple_carry;
  input signed_mode;
  wire signed_mode;
  wire \upper_product_bits:1.ripple_adder_bit:376 ;
  wire \upper_product_bits:1.ripple_adder_bit:377 ;
  wire \upper_product_bits:2.ripple_adder_bit:385 ;
  wire \upper_product_bits:2.ripple_adder_bit:386 ;
  wire \upper_product_bits:3.ripple_adder_bit:394 ;
  wire \upper_product_bits:3.ripple_adder_bit:395 ;
  wire \upper_product_bits:4.ripple_adder_bit:403 ;
  wire \upper_product_bits:4.ripple_adder_bit:404 ;
  assign _038_ = 1'h0 ? 1'h1 : 1'h0;
  assign _040_ = multiplier[1] & multiplicand[0];
  assign _041_ = _040_ ^ invert[8];
  assign _042_ = _041_ ? 1'h1 : 1'h0;
  assign _045_ = 1'h0 ? 1'h1 : 1'h0;
  assign _046_ = multiplier[1] & multiplicand[1];
  assign _039_ = 1'h0 ? 1'h1 : 1'h0;
  assign _047_ = _046_ ^ invert[9];
  assign _048_ = _047_ ? 1'h1 : 1'h0;
  assign _052_ = 1'h0 ? 1'h1 : 1'h0;
  assign _053_ = multiplier[1] & multiplicand[2];
  assign _054_ = _053_ ^ invert[10];
  assign _055_ = _054_ ? 1'h1 : 1'h0;
  assign _058_ = signed_mode & 1'h1;
  assign _059_ = _058_ ? 1'h1 : 1'h0;
  assign _060_ = multiplier[1] & multiplicand[3];
  assign _062_ = _060_ ^ invert[11];
  assign _063_ = _062_ ? 1'h1 : 1'h0;
  assign _050_ = multiplier[0] & multiplicand[0];
  assign _066_ = 1'h0 ? 1'h1 : 1'h0;
  assign _067_ = 1'h0 ? 1'h1 : 1'h0;
  assign _068_ = multiplier[2] & multiplicand[0];
  assign _069_ = _068_ ^ invert[12];
  assign _070_ = _069_ ? 1'h1 : 1'h0;
  assign _061_ = _050_ ^ invert[4];
  assign _072_ = _061_ ? 1'h1 : 1'h0;
  assign _074_ = 1'h0 ? 1'h1 : 1'h0;
  assign _075_ = multiplier[2] & multiplicand[1];
  assign _076_ = _075_ ^ invert[13];
  assign _077_ = _076_ ? 1'h1 : 1'h0;
  assign _080_ = 1'h0 ? 1'h1 : 1'h0;
  assign _081_ = multiplier[2] & multiplicand[2];
  assign _082_ = _081_ ^ invert[14];
  assign _084_ = _082_ ? 1'h1 : 1'h0;
  assign _087_ = signed_mode & 1'h1;
  assign _088_ = _087_ ? 1'h1 : 1'h0;
  assign _089_ = multiplier[2] & multiplicand[3];
  assign _090_ = _089_ ^ invert[15];
  assign _091_ = _090_ ? 1'h1 : 1'h0;
  assign _095_ = signed_mode & 1'h1;
  assign _096_ = _095_ ? 1'h1 : 1'h0;
  assign _097_ = signed_mode & 1'h1;
  assign _098_ = _097_ ? 1'h1 : 1'h0;
  assign _099_ = multiplier[3] & multiplicand[0];
  assign _100_ = _099_ ^ invert[16];
  assign _101_ = _100_ ? 1'h1 : 1'h0;
  assign _104_ = signed_mode & 1'h1;
  assign _106_ = _104_ ? 1'h1 : 1'h0;
  assign _107_ = multiplier[3] & multiplicand[1];
  assign _108_ = _107_ ^ invert[17];
  assign _109_ = _108_ ? 1'h1 : 1'h0;
  assign _112_ = signed_mode & 1'h1;
  assign _113_ = _112_ ? 1'h1 : 1'h0;
  assign _114_ = multiplier[3] & multiplicand[2];
  assign _115_ = _114_ ^ invert[18];
  assign _001_ = _115_ ? 1'h1 : 1'h0;
  assign _105_ = 1'h0 ? 1'h1 : 1'h0;
  assign _004_ = 1'h0 ? 1'h1 : 1'h0;
  assign _005_ = multiplier[3] & multiplicand[3];
  assign _006_ = _005_ ^ invert[19];
  assign _007_ = _006_ ? 1'h1 : 1'h0;
  assign _010_ = signed_mode ? 1'h1 : 1'h0;
  assign _000_ = multiplier[0] & multiplicand[1];
  assign _011_ = _000_ ^ invert[5];
  assign _020_ = _011_ ? 1'h1 : 1'h0;
  assign _023_ = 1'h0 ? 1'h1 : 1'h0;
  assign _024_ = multiplier[0] & multiplicand[2];
  assign _025_ = _024_ ^ invert[6];
  assign _026_ = _025_ ? 1'h1 : 1'h0;
  assign _030_ = signed_mode & 1'h1;
  assign _031_ = _030_ ? 1'h1 : 1'h0;
  assign _032_ = multiplier[0] & multiplicand[3];
  assign _033_ = _032_ ^ invert[7];
  assign _034_ = _033_ ? 1'h1 : 1'h0;
  assign _028_ = 1'h0 ? 1'h1 : 1'h0;
  assign _037_ = 1'h0 ? 1'h1 : 1'h0;
  full_adder \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit  (
    .a(part_prod_sum[1]),
    .b(part_prod_carry[0]),
    .c(product_bit[4]),
    .carry_out(_094_),
    .sum_out(_083_)
  );
  full_adder \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit  (
    .a(part_prod_sum[2]),
    .b(part_prod_carry[1]),
    .c(product_bit[5]),
    .carry_out(_022_),
    .sum_out(_021_)
  );
  full_adder \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit  (
    .a(part_prod_sum[3]),
    .b(part_prod_carry[2]),
    .c(product_bit[6]),
    .carry_out(_029_),
    .sum_out(_027_)
  );
  full_adder \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit  (
    .a(part_prod_sum[4]),
    .b(part_prod_carry[3]),
    .c(product_bit[7]),
    .carry_out(_036_),
    .sum_out(_035_)
  );
  full_adder \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit  (
    .a(part_prod_sum[6]),
    .b(part_prod_carry[4]),
    .c(product_bit[8]),
    .carry_out(_044_),
    .sum_out(_043_)
  );
  full_adder \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit  (
    .a(part_prod_sum[7]),
    .b(part_prod_carry[5]),
    .c(product_bit[9]),
    .carry_out(_051_),
    .sum_out(_049_)
  );
  full_adder \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit  (
    .a(part_prod_sum[8]),
    .b(part_prod_carry[6]),
    .c(product_bit[10]),
    .carry_out(_057_),
    .sum_out(_056_)
  );
  full_adder \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit  (
    .a(part_prod_sum[9]),
    .b(part_prod_carry[7]),
    .c(product_bit[11]),
    .carry_out(_065_),
    .sum_out(_064_)
  );
  full_adder \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit  (
    .a(part_prod_sum[11]),
    .b(part_prod_carry[8]),
    .c(product_bit[12]),
    .carry_out(_073_),
    .sum_out(_071_)
  );
  full_adder \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit  (
    .a(part_prod_sum[12]),
    .b(part_prod_carry[9]),
    .c(product_bit[13]),
    .carry_out(_079_),
    .sum_out(_078_)
  );
  full_adder \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit  (
    .a(part_prod_sum[13]),
    .b(part_prod_carry[10]),
    .c(product_bit[14]),
    .carry_out(_086_),
    .sum_out(_085_)
  );
  full_adder \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit  (
    .a(part_prod_sum[14]),
    .b(part_prod_carry[11]),
    .c(product_bit[15]),
    .carry_out(_093_),
    .sum_out(_092_)
  );
  full_adder \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit  (
    .a(part_prod_sum[16]),
    .b(part_prod_carry[12]),
    .c(product_bit[16]),
    .carry_out(_103_),
    .sum_out(_102_)
  );
  full_adder \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit  (
    .a(part_prod_sum[17]),
    .b(part_prod_carry[13]),
    .c(product_bit[17]),
    .carry_out(_111_),
    .sum_out(_110_)
  );
  full_adder \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit  (
    .a(part_prod_sum[18]),
    .b(part_prod_carry[14]),
    .c(product_bit[18]),
    .carry_out(_003_),
    .sum_out(_002_)
  );
  full_adder \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit  (
    .a(part_prod_sum[19]),
    .b(part_prod_carry[15]),
    .c(product_bit[19]),
    .carry_out(_009_),
    .sum_out(_008_)
  );
  full_adder \upper_product_bits:1.ripple_adder_bit  (
    .a(part_prod_sum[21]),
    .b(part_prod_carry[16]),
    .c(ripple_carry[0]),
    .carry_out(_013_),
    .sum_out(_012_)
  );
  full_adder \upper_product_bits:2.ripple_adder_bit  (
    .a(part_prod_sum[22]),
    .b(part_prod_carry[17]),
    .c(ripple_carry[1]),
    .carry_out(_015_),
    .sum_out(_014_)
  );
  full_adder \upper_product_bits:3.ripple_adder_bit  (
    .a(part_prod_sum[23]),
    .b(part_prod_carry[18]),
    .c(ripple_carry[2]),
    .carry_out(_017_),
    .sum_out(_016_)
  );
  full_adder \upper_product_bits:4.ripple_adder_bit  (
    .a(part_prod_sum[24]),
    .b(part_prod_carry[19]),
    .c(ripple_carry[3]),
    .carry_out(_019_),
    .sum_out(_018_)
  );
  assign part_prod_sum = { _096_, \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit:360 , \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit:339 , \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit:317 , \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit:295 , _066_, \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit:268 , \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit:246 , \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit:225 , \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit:204 , _037_, \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit:179 , \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit:157 , \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit:136 , \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit:115 , _028_, \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit:90 , \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit:68 , \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit:47 , \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit:26 , 5'h00 };
  assign part_prod_carry = { \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit:361 , \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit:340 , \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit:318 , \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit:296 , \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit:269 , \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit:247 , \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit:226 , \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit:205 , \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit:180 , \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit:158 , \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit:137 , \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit:116 , \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit:91 , \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit:69 , \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit:48 , \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit:27 , 4'h0 };
  assign product_bit = { _007_, _001_, _109_, _101_, _091_, _084_, _077_, _070_, _063_, _055_, _048_, _042_, _034_, _026_, _020_, _072_, 4'h0 };
  assign invert = { _004_, _113_, _106_, _098_, _088_, _080_, _074_, _067_, _059_, _052_, _045_, _038_, _031_, _023_, _105_, _039_, 4'h0 };
  assign ripple_carry = { \upper_product_bits:4.ripple_adder_bit:404 , \upper_product_bits:3.ripple_adder_bit:395 , \upper_product_bits:2.ripple_adder_bit:386 , \upper_product_bits:1.ripple_adder_bit:377 , _010_ };
  assign \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit:26  = _083_;
  assign \multplier_bits:1.multplicand_bits:1.carry_save_adder_bit:27  = _094_;
  assign \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit:47  = _021_;
  assign \multplier_bits:1.multplicand_bits:2.carry_save_adder_bit:48  = _022_;
  assign \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit:68  = _027_;
  assign \multplier_bits:1.multplicand_bits:3.carry_save_adder_bit:69  = _029_;
  assign \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit:90  = _035_;
  assign \multplier_bits:1.multplicand_bits:4.carry_save_adder_bit:91  = _036_;
  assign \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit:115  = _043_;
  assign \multplier_bits:2.multplicand_bits:1.carry_save_adder_bit:116  = _044_;
  assign \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit:136  = _049_;
  assign \multplier_bits:2.multplicand_bits:2.carry_save_adder_bit:137  = _051_;
  assign \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit:157  = _056_;
  assign \multplier_bits:2.multplicand_bits:3.carry_save_adder_bit:158  = _057_;
  assign \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit:179  = _064_;
  assign \multplier_bits:2.multplicand_bits:4.carry_save_adder_bit:180  = _065_;
  assign \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit:204  = _071_;
  assign \multplier_bits:3.multplicand_bits:1.carry_save_adder_bit:205  = _073_;
  assign \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit:225  = _078_;
  assign \multplier_bits:3.multplicand_bits:2.carry_save_adder_bit:226  = _079_;
  assign \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit:246  = _085_;
  assign \multplier_bits:3.multplicand_bits:3.carry_save_adder_bit:247  = _086_;
  assign \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit:268  = _092_;
  assign \multplier_bits:3.multplicand_bits:4.carry_save_adder_bit:269  = _093_;
  assign \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit:295  = _102_;
  assign \multplier_bits:4.multplicand_bits:1.carry_save_adder_bit:296  = _103_;
  assign \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit:317  = _110_;
  assign \multplier_bits:4.multplicand_bits:2.carry_save_adder_bit:318  = _111_;
  assign \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit:339  = _002_;
  assign \multplier_bits:4.multplicand_bits:3.carry_save_adder_bit:340  = _003_;
  assign \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit:360  = _008_;
  assign \multplier_bits:4.multplicand_bits:4.carry_save_adder_bit:361  = _009_;
  assign \upper_product_bits:1.ripple_adder_bit:376  = _012_;
  assign \upper_product_bits:1.ripple_adder_bit:377  = _013_;
  assign \upper_product_bits:2.ripple_adder_bit:385  = _014_;
  assign \upper_product_bits:2.ripple_adder_bit:386  = _015_;
  assign \upper_product_bits:3.ripple_adder_bit:394  = _016_;
  assign \upper_product_bits:3.ripple_adder_bit:395  = _017_;
  assign \upper_product_bits:4.ripple_adder_bit:403  = _018_;
  assign \upper_product_bits:4.ripple_adder_bit:404  = _019_;
  assign product = { \upper_product_bits:4.ripple_adder_bit:403 , \upper_product_bits:3.ripple_adder_bit:394 , \upper_product_bits:2.ripple_adder_bit:385 , \upper_product_bits:1.ripple_adder_bit:376 , part_prod_sum[20], part_prod_sum[15], part_prod_sum[10], part_prod_sum[5] };
endmodule
